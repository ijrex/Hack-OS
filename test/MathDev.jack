// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/11/Seven/Main.jack

/**
 * Computes the value of 1 + (2 * 3) and prints the result
 * at the top-left of the screen.
 */
class MathDev {

  static Array twoToThe;

  function void init() {
    let twoToThe = Array.new(16);

    let twoToThe[0] = 1;
    let twoToThe[1] = 2;
    let twoToThe[2] = 4;
    let twoToThe[3] = 8;
    let twoToThe[4] = 16;
    let twoToThe[5] = 32;
    let twoToThe[6] = 64;
    let twoToThe[7] = 128;
    let twoToThe[8] = 256;
    let twoToThe[9] = 512;
    let twoToThe[10] = 1024;
    let twoToThe[11] = 2048;
    let twoToThe[12] = 4096;
    let twoToThe[13] = 8192;
    let twoToThe[14] = 16384;
    let twoToThe[15] = 32767 + 1;
    return;
  }

  // Return true if the j-th bit of the integer x is 1
  function int bit(int x, int j) {
    return ~((x & twoToThe[j]) = 0);
  }

  /** Returns the product of x and y.
  *  When a Jack compiler detects the multiplication operator '*' in the
  *  program's code, it handles it by invoking this method. In other words,
  *  the Jack expressions x*y and multiply(x,y) return the same value.
  */
  function int multiply(int x, int y) {
    var int sum, shiftedX, j;

    let sum = 0;
    let shiftedX = x;
    let j = 0;

    while (j < 16) {
      if (MathDev.bit(y, j)) {
        let sum = sum + shiftedX;
      }
      let j = j + 1;
      let shiftedX = shiftedX + shiftedX;
    }

    return sum;
  }
}

