// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 * Jack Computer Heap Addresses - 2048 - 16383
 */
class Memory {
    static Array memory, freeList;
    static int NEXT, LENGTH, HEAP_BASE, HEAP_END;

    /** Initializes the class. */
    function void init() {
        let LENGTH = 0;
        let NEXT = 1;
        let HEAP_BASE = 2048;
        let HEAP_END = 16384;

        let memory = 0;

        let freeList = HEAP_BASE;
        let freeList[LENGTH] = HEAP_END - HEAP_BASE;
        let freeList[NEXT] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    function int firstFit(int blockSize) {
        var Array foundBlock;

        let foundBlock = freeList;

        if ((freeList[NEXT] = null) & (blockSize < freeList[LENGTH])) {
            return foundBlock;
        }

        return 0;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array foundBlock, allocBlock;
        var int blockSize, allocBlockStart;

        let blockSize = size + 1;

        let foundBlock = Memory.firstFit(blockSize);

        // assign size into foundBlock
        let allocBlock = foundBlock + foundBlock[LENGTH] - blockSize;
        let allocBlock[LENGTH] = blockSize;

        // reduce found block length
        let foundBlock[LENGTH] = foundBlock[LENGTH] - blockSize;

        return allocBlockStart;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array obj) {
        return;
    }
}
