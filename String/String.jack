// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int len;
    field int maxLen;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
           let maxLength = 1;
        }

        let len = 0;
        let maxLen = maxLength;
        let chars = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let chars[len] = c;
            let len = len + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let chars[len] = null;
        let len = len - 1;
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, fin, exp;

        let val = 0;
        let i = len;
        let exp = 1;
        let fin = 0;

        if(chars[0] = 45) {
            let val = -val;
            let fin = 1;
        }

        while(i > fin) {
            let i = i - 1;
            let val = val + (chars[i] - 48) * exp);
            let exp = exp * 10;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int curVal, nextVal, pos, i;
        let curVal = Math.abs(val);

        // 1. Represent integer as a 6 digit string
        //    e.g. 1234 -> 001234, -12345 -> 012345

        let pos = 5;

        while (~(pos < 0)) {
            let nextVal = curVal/10;
            let chars[pos] = (curVal - (nextVal * 10)) + 48;
            let curVal = nextVal;
            let pos = pos - 1;
        }

        // 2. Append negative symbol to negative integers,
        //    trim zeros from beginning of string,
        //    update new string length
        //    e.g. 001234 -> "1234", (neg)012345 -> "-12345"

        let len = 6;
        let pos = 0;

        if (val < 0) {
            let chars[0] = 45;
            let pos = 1;
        }

        while (chars[pos] = 48) {
            let i = pos;

            while (i < len) {
                let chars[i] = chars[i + 1];
                let i = i + 1;
            }

            let len = len - 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 10;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 08;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
