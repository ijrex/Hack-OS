// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
 /* Screen starts at 16384 - 24575*/
class Screen {

    static Array screen;
    static boolean color;

    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = false;

        let twoToThe = Array.new(16);

        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 32767 + 1;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, row;

        let row = x/16;
        let addr = (y * 32) + row;
        let screen[addr] = screen[addr] | twoToThe[x - (16 * row)];

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int adyMinusBdx, dx, dy, a, b, temp, mod;

        let a = 0; // drawn pixel y
        let b = 0; // drawn pixel x

        let dx = Math.abs(x2 - x1);
        let dy = Math.abs(y2 - y1);

        /**  Horizontal line */
        if (dy = 0) {
            if (x1 > x2) {
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
            }

            while (~(a > dx)) {
                do Screen.drawPixel(x1 + a, y1);
                let a = a + 1;
            }
            return;
        }

        /** Vertical line */
        if (dx = 0) {
            if (y1 > y2) {
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }

            while (~(b > dy)) {
                do Screen.drawPixel(x1, y1 + b);
                let b = b + 1;
            }
            return;
        }

        /** Diagonal line */
        let adyMinusBdx = 0;

        // 1. Rotate so that xStart < xEnd
        if (x1 > x2) {
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }

        // 2. Set angle (0deg < θ < 90deg) or (270deg < θ < 360deg)
        if (y1 < y2) {
            let mod = 1;
        } else {
            let mod = -1;
        }

        // 3. Draw diagonal line
        while (~(a > dx) & ~(b > dy)) {

            do Screen.drawPixel(x1 + a, y1 + b);

            if (adyMinusBdx > 0) {
                let a = a + 1;
                let adyMinusBdx = adyMinusBdx - dy;
            } else {
                let b = b + mod;
                let adyMinusBdx = adyMinusBdx + dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }
}
